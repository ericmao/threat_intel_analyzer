name: Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/backend
          ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=semver,pattern={{version}}
          type=ref,event=branch
          type=sha,format=long

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

    - name: Deploy to production
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
      run: |
        # 準備部署腳本
        echo "
        cd /opt/threat-intel-analyzer
        docker compose pull
        export OPENAI_API_KEY=${OPENAI_API_KEY}
        export POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        export ES_PASSWORD=${ES_PASSWORD}
        docker compose up -d
        " > deploy.sh
        
        # 執行部署
        chmod +x deploy.sh
        scp docker-compose.yml ${DEPLOY_USER}@${DEPLOY_HOST}:/opt/threat-intel-analyzer/
        scp deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:/opt/threat-intel-analyzer/
        ssh ${DEPLOY_USER}@${DEPLOY_HOST} "cd /opt/threat-intel-analyzer && ./deploy.sh"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: |
          Deployment Status: ${{ needs.deploy.result }}
          ${{ needs.deploy.result == 'success' && ':white_check_mark:' || ':x:' }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
